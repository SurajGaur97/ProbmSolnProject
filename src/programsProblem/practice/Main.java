package programsProblem.practice;

import programsProblem.practice.streamApi.AvgSalary;
import programsProblem.utils.DriverClass;

public class Main {

//	static CheckPrimeNum checkPrimeNum = new CheckPrimeNum();
//	static ReverseString reverseString = new ReverseString();
//	static SwapNumber swapNumber = new SwapNumber();
//	static MaximumCharInString maximumcharInString = new MaximumCharInString();
//	static CountingBits countingBits = new CountingBits();
//	static MissingNumber missingNumber = new MissingNumber();
//	static ReverseBits reverseBit = new ReverseBits();
//	static ClimbingStairs climbingStairs = new ClimbingStairs();
//	static PrintCountsOfNumbers printCountsOfNumbers = new PrintCountsOfNumbers();
//	static SmallestPositiveNo smallestPositiveNo = new SmallestPositiveNo();
//	static Maximum69No maximum69No = new Maximum69No();
//	static LongestSubstringWithoutRepeatingCharacters repeatingCharacters = new LongestSubstringWithoutRepeatingCharacters();
//	static LongestRepeatingCharacterReplacement characterReplacement = new LongestRepeatingCharacterReplacement();
//	static NoOfCorrespondingFragmentsCodility correspondingFragmentsCodility = new NoOfCorrespondingFragmentsCodility();
//	static SecondHighestNo highestNo = new SecondHighestNo();
//	static FirstNonRepeatingVowel nonRepeatingVowel = new FirstNonRepeatingVowel();
//	static ReverseNumber reverseNumber = new ReverseNumber();
//	static ThreeSum threeSum = new ThreeSum();
//	static InorderTraversal it = new InorderTraversal();
//	static MoneyDistributionCalculation moneyCalculation = new MoneyDistributionCalculation();
//
//	static RectanglePatterns rectanglePatterns = new RectanglePatterns();
//	static PyramidPatterns pyramidPatterns = new PyramidPatterns();
//	static PyramidPatternsNo pyramidPatternsNo = new PyramidPatternsNo();
//	static PyrPatAlphaNum pyrPatAlphaNum = new PyrPatAlphaNum();
//	static DiamondPattern diamondPattern = new DiamondPattern();
//	static HalfNumDiamond halfNumDiamond = new HalfNumDiamond();
//	static FloydsTrianglePattern floydsTrianglePattern = new FloydsTrianglePattern();
//	static ButterflyPattern butterflyPattern = new ButterflyPattern();
//	static ArrowPrinting arrowPrinting = new ArrowPrinting();
//	static LinkedListOperation linkedListOperation = new LinkedListOperation();
//	static SelectionSort selectionSort = new SelectionSort();
//	static BubbleSort bubbleSort = new BubbleSort();
//	static ZeroOneKnapsack zeroOneKnapsack = new ZeroOneKnapsack();
//	static SubsetSum subsetSum = new SubsetSum();
//	static EqualSumPartition subsetSum= new EqualSumPartition();
//	static LongestCommonSubsequence longestCommonSubsequence = new LongestCommonSubsequence();
//	static CoinChangeI coinChangeI = new CoinChangeI();
//	static CountSubsetSumWithGivenSum countSubsetSumWithGivenSum = new CountSubsetSumWithGivenSum();
//	static CountSubsetSumWithGivenDiff countSubsetSumWithGivenDiff = new CountSubsetSumWithGivenDiff();
//	static TargetSum targetSum = new TargetSum();
//	static CapitaliseFirstLetterOfElementOfArr capitaliseFirstLetterOfElementOfArr = new CapitaliseFirstLetterOfElementOfArr();
//	static CountSubsetSum subsetSum = new CountSubsetSum();
//  static ExcelSheetColumnTitle excelSheetColumnTitle = new ExcelSheetColumnTitle();
//  static ExcelSheetColumnNo excelSheetColumnNo = new ExcelSheetColumnNo();
//  static MaximumDepthOfBinaryTree maximumDepthOfBinaryTree = new MaximumDepthOfBinaryTree();
//  static RotateArray rotateArray = new RotateArray();
//  static InsertionSort insertionSort = new InsertionSort();
//  static FibonacciNumbers fibonacciNumbers = new FibonacciNumbers();
//  static FindSubstringWithUniqueChars findSubstringWithUniqueChars = new FindSubstringWithUniqueChars();
//  static LinkedListDriverClass linkedListDriverClass = new LinkedListDriverClass();
//	static MiddleNode middleNode = new MiddleNode();
//	static ReverseLL reverseLL = new ReverseLL();
//	static CheckPalindrome checkPalindrome = new CheckPalindrome();
//	static MergeTwoSortedList mergeTwoSortedList = new MergeTwoSortedList();
//	static RemoveNthNodeFromEnd removeNthNodeFromEnd = new RemoveNthNodeFromEnd();
//	static MergeSort mergeSort = new MergeSort();
//	static MergeSortLL mergeSortLL = new MergeSortLL();
//	static MergeKSortedList mergeKSortedList = new MergeKSortedList();
//	static RemoveDuplicatesFromSortedList removeDuplicatesFromSortedList = new RemoveDuplicatesFromSortedList();
//	static RemoveDuplicateFromUnsortedList fromUnsortedList = new RemoveDuplicateFromUnsortedList();
//	static IntersactionOf2LL intersactionOf2LL = new IntersactionOf2LL();
//	static IntersectPoint intersectPoint = new IntersectPoint();
//	static RemoveLoopFromLL removeLoopFromLL = new RemoveLoopFromLL();
//	static DetectLifeCycle detectLifeCycle = new DetectLifeCycle();
//	static RotateList rotateList = new RotateList();
//	static AddTwoNums addTwoNums = new AddTwoNums();
//	static ReverseNodeInKGroup reverseNodeInKGroup = new ReverseNodeInKGroup();
//  static ReverseSentence reverseSentence = new ReverseSentence();
//	static MaxMinElementInBT maxMinElementInBT = new MaxMinElementInBT();
//	static DiameterOfBT diameterOfBT = new DiameterOfBT();
//	static SymmetricTree symmetricTree = new SymmetricTree();
//	static BalancedBT balancedBT = new BalancedBT();
//	static Check2BTIsomorphic check2BTIsomorphic = new Check2BTIsomorphic();
//	static PreOrderTraversalBT preOrderTraversalBT = new PreOrderTraversalBT();
//	static InOrderTraversalBT inOrderTraversalBT = new InOrderTraversalBT();
//	static PostOrderTraversalBT postOrderTraversalBT = new PostOrderTraversalBT();
//	static LevelOrderTraversalBT levelOrderTraversalBT = new LevelOrderTraversalBT();
//	static HeightOfBT heightOfBT = new HeightOfBT();
//	static LeftViewOfBT leftViewOfBT = new LeftViewOfBT();
//	static VerticalOrderTraversal verticalOrderTraversal = new VerticalOrderTraversal();
//	static TopViewOfBT topViewOfBT = new TopViewOfBT();
//	static DriverClass<Integer> driverClass = new BottomViewOfBT();
//	static RightViewOfBT rightViewOfBT = new RightViewOfBT();
//	static PrintLeafNodesOfBT printLeafNodesOfBT = new PrintLeafNodesOfBT();
//	static BoundaryTraversal printBoundaryNodes = new BoundaryTraversal();
//	static ZigZagOrderTraversalOfBT zagOrderTraversalOfBT = new ZigZagOrderTraversalOfBT();
//	static DiagonalOrderTraversal diagonalOrderTraversal = new DiagonalOrderTraversal();
//	static DuplicateSubtreeInBT duplicateSubtreeInBT = new DuplicateSubtreeInBT();
//	static MergeAndSortTwoArray mergeAndSortTwoArray = new MergeAndSortTwoArray();
//	static IsomorphicStrings isomorphicStrings = new IsomorphicStrings();
//static PrintCountOfCharInString printCountOfCharInString = new PrintCountOfCharInString();
//	static ListFilter listFilter = new ListFilter();
//	static MapMarksWithGrad mapMarksWithGrad = new MapMarksWithGrad();
//	static BasicStreamMethods basicStreamMethods = new BasicStreamMethods();
//	static AddDigits addDigits = new AddDigits();
//	static IsomorphicStrings isomorphicStrings = new IsomorphicStrings();
//	static ContainsDuplicate2 containsDuplicate2 = new ContainsDuplicate2();
//	static PowerOfTwo powerOfTwo = new PowerOfTwo();
//	static RansomNote ransomNote = new RansomNote();
//	static SortedSquares sortedSquares = new SortedSquares();
//	static MergeSortedArray mergeSortedArray = new MergeSortedArray();
//	static MinBin minBin = new MinBin();
//	static RemoveDuplicatesFromSortedArray removeDuplicatesFromSortedArray = new RemoveDuplicatesFromSortedArray();
//	static CheckNandItsDoubleExists checkNandItsDoubleExists = new CheckNandItsDoubleExists();
//	static DriverClass driverClass = new ValidMountainArray();
//	static DriverClass driverClass = new ReplaceElementsWithGreatestElementOnRightSide();
//	static DriverClass driverClass = new MoveZeroes();
//	static DriverClass driverClass = new SortArrayByParity();
//	static DriverClass driverClass = new RemoveElement();
//	static DriverClass driverClass = new HeightChecker();
//	static DriverClass driverClass = new ThirdMaximumNo();
//	static DriverClass<Integer> driverClass = new FindAllNumbersDisappearedInAnArray();
//	static DriverClass<Integer> driverClass = new SortColor();
//	static DriverClass<Integer> driverClass = new PrintCountOfNums();
//	static DriverClass<Integer> driverClass = new MedianOdTwoSortedArrays();
//	static DriverClass<Integer> driverClass = new ThreeSum();
//	static DriverClass<Integer> driverClass = new ThreeSumClosest();
//	static DriverClass<Integer> driverClass = new TwoSum();
//	static DriverClass<Integer> driverClass = new FourSum();
//	static DriverClass<Integer> driverClass = new SearchRangeOfTarget();
//	static DriverClass<Integer> driverClass = new Permutation();
//	static DriverClass<Integer> driverClass = new NextPermutation();
//	static DriverClass<Integer> driverClass = new NoOfGoodPair();
//	static DriverClass<Integer> driverClass = new SmallerNumbersThanCurrent();
//	static DriverClass<Integer> driverClass = new SumIndicesWithKSetBits();
//	static DriverClass<Integer> driverClass = new LeftRightDifference();
//	static DriverClass<Integer> driverClass = new CreateTargetArray();
//	static DriverClass<Integer> driverClass = new MinimumNumberGame();
//	static DriverClass<Integer> driverClass = new DecompressRLElist();
//	static DriverClass<Integer> driverClass = new MaxLenOfSortedSubArray();
//	static DriverClass<Integer> driverClass = new DifferenceOfEleSumDigSum();
//	static DriverClass<Integer> driverClass = new ArithmeticTriplets();
//	static DriverClass<Integer> driverClass = new CountKDifference();
//	static DriverClass<Integer> driverClass = new SumOddLengthSubarrays();
//    static DriverClass<Integer> driverClass = new MergeTwoSortedArray();
//    static DriverClass<Integer> driverClass = new MergeTwoSortedList();
//    static DriverClass<Integer> driverClass = new Sort012();
//    static DriverClass<Integer> driverClass = new Utilization();
//    static DriverClass<Integer> driverClass = new FindPosNegPair();
//    static DriverClass<String> driverClass = new FindNoOfSubstring();
//	static DriverClass<Integer> driverClass = new UniquePaths();
//	static DriverClass<Integer> driverClass = new CountRemovals();
//	static DriverClass<String> driverClass = new GreatestUpperLowerCaseChar();
//	static DriverClass<Integer> driverClass = new BinaryGap();
//	static DriverClass<Integer> driverClass = new SumOfNosInList();
//	static DriverClass<Integer> driverClass = new ProductExceptSelf();
//	static DriverClass<String> driverClass = new DecodeEncodedString();
//	static DriverClass<String> driverClass = new PrintOddEven();
//	static DriverClass<Integer> driverClass = new MaxProfit();
//	static DriverClass<Integer> driverClass = new StringCompression();
//	static DriverClass<String> driverClass = new GcdOfString();
//	static DriverClass<String> driverClass = new ReverseVowelsOfString();
//	static DriverClass<Integer> driverClass = new FindMaxAverage();
//	static DriverClass<Integer> driverClass = new MaxVowels1456();
//	static DriverClass<Integer> driverClass = new MaxConsecutiveOnesIII1004();
//	static DriverClass<Integer> driverClass = new FinsPivotIndex();
//	static DriverClass<String> driverClass = new ReverseWordsInString();
//	static DriverClass<Integer> driverClass = new FindGCD();
//	static DriverClass<Integer> driverClass = new MaxTrappingRainWater();
//	static DriverClass<String> driverClass = new PlusMultArray();
//	static DriverClass<Integer> driverClass = new EqualRowAndColumnPairs2352();
//	static DriverClass<String> driverClass = new RemovingStarsFromString2390();
//	static DriverClass<Integer> driverClass = new AsteroidCollision();
//	static DriverClass<String> driverClass = new Dota2Senate649();
//	static DriverClass<Integer> driverClass = new BankChatBot();
//	static DriverClass<Integer> driverClass = new OddEvenLinkedList328();
//	static DriverClass<Integer> driverClass = new MaximumTwinSumOfALinkedList();
//	static DriverClass<Integer> driverClass = new LeafSimilarTrees872();
//	static DriverClass<Integer> driverClass = new CountGoodNodesInBinaryTree();
//	static DriverClass<Integer> driverClass = new CheckPalindrome();
//	static DriverClass<Integer> driverClass = new Rotate90Degree();
//	static DriverClass<Integer> driverClass = new KthMaxAndMinElement();
//	static DriverClass<Integer> driverClass = new PathSum3();
//	static DriverClass<Integer> driverClass = new LowestCommonAncestor236();
//	static DriverClass<Integer> driverClass = new RightViewOfBT();
//	static DriverClass<Integer> driverClass = new MaximumLevelSum();
//	static DriverClass<Integer> driverClass = new BottomViewOfBT();
//	static DriverClass<TreeNode> driverClass = new DeleteNode();
//	static DriverClass<Boolean> driverClass = new KeysAndRooms();
//	static DriverClass<Integer> driverClass = new NoOfProvinces();
//	static DriverClass<Boolean> driverClass = new BalancedParentheses();
//	static DriverClass<Integer> driverClass = new FindSpecialPrimeNo();
//	static DriverClass<Boolean> driverClass = new DetectCycleInGraph();
//	static DriverClass<Boolean> driverClass = new DetectCycleInGraphBfs();
//	static DriverClass<Integer> driverClass = new SumOfAllSubArraysOfSizeK();
//	static DriverClass<Integer> driverClass = new BasicStreamMethods();
//	static DriverClass<Integer> driverClass = new FirstNonRepeatingCharInString();
    static DriverClass<Integer> driverClass = new AvgSalary();

	public static void main(String[] args) {
		driverClass.driverMethod();
	}

}

